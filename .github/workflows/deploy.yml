name: Deploy to Hostinger VPS with Kubernetes

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          docker build -t "${{ secrets.DOCKER_USERNAME }}/node-app:${GITHUB_SHA::8}" .

      - name: Push Docker image to Docker Hub
        run: |
          docker push "${{ secrets.DOCKER_USERNAME }}/node-app:${GITHUB_SHA::8}"

      - name: SSH to Hostinger VPS
        env:
          HOSTINGER_USERNAME: ${{ secrets.HOSTINGER_USERNAME }}
          HOSTINGER_IP: ${{ secrets.HOSTINGER_IP }}
          HOSTINGER_PASSWORD: ${{ secrets.HOSTINGER_PASSWORD }}
        run: |
          sshpass -p "${{ secrets.HOSTINGER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${HOSTINGER_USERNAME}@${HOSTINGER_IP} << 'EOF'
            # Pull the latest Docker image
            docker pull ${DOCKER_USERNAME}/node-app:${GITHUB_SHA::8}

            # Stop and remove existing container
            docker stop node-app || true
            docker rm node-app || true

            # Run the new container
            docker run -d --name node-app -p 80:3000 \
              -e MONGODB_URI=${{ secrets.MONGODB_URI }} \
              -e GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
              -e GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
              -e CLIENT_URL=${{ secrets.CLIENT_URL }} \
              -e SESSION_SECRET=${{ secrets.SESSION_SECRET }} \
              -e UPSTASH_REDIS_REST_URL=${{ secrets.UPSTASH_REDIS_REST_URL }} \
              -e UPSTASH_REDIS_REST_TOKEN=${{ secrets.UPSTASH_REDIS_REST_TOKEN }} \
              -e GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
              -e RESEND_API_KEY=${{ secrets.RESEND_API_KEY }} \
              -e STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
              -e STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }} \
              ${DOCKER_USERNAME}/node-app:${GITHUB_SHA::8}
          EOF

      - name: Configure Kubernetes
        run: |
          sshpass -p "${{ secrets.HOSTINGER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${HOSTINGER_USERNAME}@${HOSTINGER_IP} << 'EOF'
            # Set up Kubernetes configurations if Kubernetes is running on your VPS
            kubectl config set-context --current --namespace=default
            kubectl apply -f k8s/deployment.yaml
            kubectl apply -f k8s/service.yaml
            kubectl apply -f k8s/ingress.yaml
          EOF

      - name: Check deployment status
        run: |
          sshpass -p "${{ secrets.HOSTINGER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${HOSTINGER_USERNAME}@${HOSTINGER_IP} << 'EOF'
            kubectl rollout status deployment/node-app
            kubectl get pods
            kubectl get services
            kubectl get ingress
          EOF
