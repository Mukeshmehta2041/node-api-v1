name: Deploy to Hostinger VPS with Kubernetes

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          docker build -t "${{ secrets.DOCKER_USERNAME }}/node-app" .

      - name: Push Docker image to Docker Hub
        run: |
          docker push "${{ secrets.DOCKER_USERNAME }}/node-app"

      - name: SSH to Hostinger VPS and Deploy with Kubernetes
        env:
          HOSTINGER_SSH_PRIVATE_KEY: ${{ secrets.HOSTINGER_SSH_PRIVATE_KEY }}
          HOSTINGER_USERNAME: ${{ secrets.HOSTINGER_USERNAME }}
          HOSTINGER_IP: ${{ secrets.HOSTINGER_IP }}
        run: |
          echo "${{ secrets.HOSTINGER_SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key
          ssh -i private_key -o StrictHostKeyChecking=no ${HOSTINGER_USERNAME}@${HOSTINGER_IP} << 'EOF'
            # Create a directory for the application
            mkdir -p ~/node-app
            cd ~/node-app
            
            # Create Kubernetes secrets
            kubectl create secret generic my-app-secrets \
              --from-literal=MONGODB_URI='${{ secrets.MONGODB_URI }}' \
              --from-literal=GOOGLE_CLIENT_ID='${{ secrets.GOOGLE_CLIENT_ID }}' \
              --from-literal=GOOGLE_CLIENT_SECRET='${{ secrets.GOOGLE_CLIENT_SECRET }}' \
              --from-literal=CLIENT_URL='${{ secrets.CLIENT_URL }}' \
              --from-literal=SESSION_SECRET='${{ secrets.SESSION_SECRET }}' \
              --from-literal=UPSTASH_REDIS_REST_URL='${{ secrets.UPSTASH_REDIS_REST_URL }}' \
              --from-literal=UPSTASH_REDIS_REST_TOKEN='${{ secrets.UPSTASH_REDIS_REST_TOKEN }}' \
              --from-literal=GEMINI_API_KEY='${{ secrets.GEMINI_API_KEY }}' \
              --from-literal=RESEND_API_KEY='${{ secrets.RESEND_API_KEY }}' \
              --from-literal=STRIPE_SECRET_KEY='${{ secrets.STRIPE_SECRET_KEY }}' \
              --from-literal=STRIPE_WEBHOOK_SECRET='${{ secrets.STRIPE_WEBHOOK_SECRET }}' \
              --dry-run=client -o yaml | kubectl apply -f -

            # Set up Kubernetes configurations
            kubectl config set-context --current --namespace=default
            
            # Apply Kubernetes configurations
            kubectl apply -f k8s/deployment.yaml
            kubectl apply -f k8s/service.yaml
            kubectl apply -f k8s/ingress.yaml
            
            # Check deployment status
            kubectl rollout status deployment/node-app
            kubectl get pods
            kubectl get services
            kubectl get ingress
          EOF
